#
# This test kills the slave while a Streaming Replication transaction is in progress
# but before a fragment has already been applied on the slave. It is expected that 
# after the slave restarts, the cluster will continue to be consistent.
#

--source include/galera_cluster.inc
--source include/have_innodb.inc

CREATE TABLE t1 (f1 INTEGER PRIMARY KEY) ENGINE=InnoDB;


# Block node #2's applier before table t1's inserts have come into play

--connection node_2
SELECT COUNT(*) = 0 FROM t1;

--connection node_1
CREATE TABLE t2 (f1 INTEGER);

--connect node_2a, 127.0.0.1, root, , test, $NODE_MYPORT_2
LOCK TABLE t2 WRITE;

--connection node_1
INSERT INTO t2 VALUES (1);

--connection node_2
SET SESSION wsrep_sync_wait = 0;

--connection node_1
SET SESSION wsrep_trx_fragment_size = 1;
SET AUTOCOMMIT=OFF;
START TRANSACTION;

INSERT INTO t1 VALUES (1);
INSERT INTO t1 VALUES (2);
INSERT INTO t1 VALUES (3);
INSERT INTO t1 VALUES (4);
INSERT INTO t1 VALUES (5);

--connection node_2
--source include/kill_galera.inc
--sleep 1

--source include/start_mysqld.inc
--sleep 1

--source include/wait_until_connected_again.inc
--source include/galera_wait_ready.inc

# Expect that the SR table will get some entries after the restart
# --let $wait_condition = SELECT COUNT(*) > 0 FROM wsrep_schema.SR;
# --source include/wait_conditions.inc

# SET SESSION TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
# SELECT COUNT(*) > 0 FROM t1;

--connection node_1
COMMIT;
SELECT COUNT(*) = 5 FROM t1;

--connection node_2
SET SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;
--let $wait_condition = SELECT COUNT(*) = 5 FROM t1;
--source include/wait_condition.inc

SELECT COUNT(*) = 0 FROM wsrep_schema.SR;

--connection node_1
DROP TABLE t1;
DROP TABLE t2;
